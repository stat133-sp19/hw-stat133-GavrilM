shiny::runApp('Modalities')
runApp('Modalities')
runApp('Modalities')
runApp('Modalities')
runApp('Modalities')
knitr::opts_chunk$set(echo = TRUE)
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:11) {
no_contrib[k] = future_value(1000, .05, k-1)
fixed_contrib[k] = no_contrib[k] + annuity(200, .05, k-1)
growing_contrib[k] = no_contrib[k] + growing_annuity(200, .05, .03, k-1)
}
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:11) {
no_contrib[k] = future_value(1000, .05, k-1)
fixed_contrib[k] = no_contrib[k] + annuity(200, .05, k-1)
growing_contrib[k] = no_contrib[k] + growing_annuity(200, .05, .03, k-1)
}
#' @title future value
#' @description calculates the future value based on intial value and rate
#' @param amount inital invested amount
#' @param rate annual rate of return
#' @param years number in years
#' @return future value
future_value <- function(amount, rate, years) {
return(amount*(1 + rate)^years)
}
future_value(amount = 100, rate = 0.05, years = 1)
future_value(amount = 500, rate = 0.05, years = 5)
future_value(amount = 1000, rate = 0.05, years = 10)
#' @title future value of annuity
#' @description calculates the future value of an annuity
#' @param contrib contributed amount
#' @param rate annual rate of return
#' @param years number in years
#' @return future value of annuity
annuity <- function(contrib, rate, years) {
return(contrib*(((1 + rate)^years - 1)/rate))
}
annuity(contrib = 200, rate = 0.05, years = 1)
annuity(contrib = 200, rate = 0.05, years = 2)
annuity(contrib = 200, rate = 0.05, years = 10)
#' @title future value of growing annuity
#' @description calculates the future value of a growing annuity
#' @param contrib contibuted amount
#' @param rate annual rate of return
#' @param growth annual rate of growth
#' @param years number in years
#' @return future value of annuity
growing_annuity <- function(contrib, rate, growth, years) {
return(contrib*(((1 + rate)^years - (1 + growth)^years)/(rate -growth)))
}
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 1)
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 2)
growing_annuity(contrib = 200, rate = 0.05, growth = 0.03, years = 10)
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:11) {
no_contrib[k] = future_value(1000, .05, k-1)
fixed_contrib[k] = no_contrib[k] + annuity(200, .05, k-1)
growing_contrib[k] = no_contrib[k] + growing_annuity(200, .05, .03, k-1)
}
modalities <- data.frame("year" = 0:10, no_contrib, fixed_contrib, growing_contrib)
modalities
calc_savings <- function(initial, contrib, rate, growth, years) {
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:years+1) {
no_contrib[k] = future_value(initial, rate, k-1)
fixed_contrib[k] = no_contrib[k] + annuity(contrib, rate, k-1)
growing_contrib[k] = no_contrib[k] + growing_annuity(contrib, rate, growth, k-1)
}
return(data.frame("year" = 0:years, no_contrib, fixed_contrib, growing_contrib))
}
#' @title future value
#' @description calculates the future value based on intial value and rate
#' @param amount inital invested amount
#' @param rate annual rate of return
#' @param years number in years
#' @return future value
future_value <- function(amount, rate, years) {
return(amount*(1 + rate)^years)
}
#' @title future value of annuity
#' @description calculates the future value of an annuity
#' @param contrib contributed amount
#' @param rate annual rate of return
#' @param years number in years
#' @return future value of annuity
annuity <- function(contrib, rate, years) {
return(contrib*(((1 + rate)^years - 1)/rate))
}
#' @title future value of growing annuity
#' @description calculates the future value of a growing annuity
#' @param contrib contributed amount
#' @param rate annual rate of return
#' @param growth annual rate of growth
#' @param years number in years
#' @return future value of annuity
growing_annuity <- function(contrib, rate, growth, years) {
return(contrib*(((1 + rate)^years - (1 + growth)^years)/(rate -growth)))
}
#' @title calculate savings
#' @description calculates savings across all modalities
#' @param initial initial amount
#' @param contrib contibuted amount
#' @param rate annual rate of return
#' @param growth annual rate of growth
#' @param years number in years
#' @return data frame of savings by year by modality
calc_savings <- function(initial, contrib, rate, growth, years) {
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:years+1) {
no_contrib[k] = future_value(initial, rate, k-1)
fixed_contrib[k] = no_contrib[k] + annuity(contrib, rate, k-1)
growing_contrib[k] = no_contrib[k] + growing_annuity(contrib, rate, growth, k-1)
}
return(data.frame("year" = 0:years, no_contrib, fixed_contrib, growing_contrib))
}
calc_savings(1000,1000,.05,.02,10)
runApp('Modalities')
future_value(1000, .05, 0)
annuity(1000, .05, 0)
calc_savings(1000,1000,.05,.03,1)
calc_savings(1000,1000,.05,.03,1)
calc_savings <- function(initial, contrib, rate, growth, years) {
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:years+1) {
no_contrib[k] = future_value(initial, rate, k-1)
fixed_contrib[k] = future_value(initial, rate, k-1) + annuity(contrib, rate, k-1)
growing_contrib[k] = future_value(initial, rate, k-1) + growing_annuity(contrib, rate, growth, k-1)
}
print(no_contrib)
return(data.frame("year" = 0:years, no_contrib, fixed_contrib, growing_contrib))
}
calc_savings(1000,1000,.05,.03,1)
calc_savings <- function(initial, contrib, rate, growth, years) {
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 1:years+1) {
no_contrib[k] = future_value(initial, rate, k-1)
fixed_contrib[k] = future_value(initial, rate, k-1) + annuity(contrib, rate, k-1)
growing_contrib[k] = future_value(initial, rate, k-1) + growing_annuity(contrib, rate, growth, k-1)
print(future_value(initial, rate, k-1))
}
return(data.frame("year" = 0:years, no_contrib, fixed_contrib, growing_contrib))
}
calc_savings(1000,1000,.05,.03,1)
calc_savings(1000,1000,.05,.03,2)
for(k in 0:years+1) {
no_contrib[k] = future_value(initial, rate, k-1)
fixed_contrib[k] = future_value(initial, rate, k-1) + annuity(contrib, rate, k-1)
growing_contrib[k] = future_value(initial, rate, k-1) + growing_annuity(contrib, rate, growth, k-1)
print(future_value(initial, rate, k-1))
}
calc_savings <- function(initial, contrib, rate, growth, years) {
no_contrib <- c()
fixed_contrib <- c()
growing_contrib <- c()
for(k in 0:years+1) {
no_contrib[k] = future_value(initial, rate, k-1)
fixed_contrib[k] = future_value(initial, rate, k-1) + annuity(contrib, rate, k-1)
growing_contrib[k] = future_value(initial, rate, k-1) + growing_annuity(contrib, rate, growth, k-1)
print(future_value(initial, rate, k-1))
}
return(data.frame("year" = 0:years, no_contrib, fixed_contrib, growing_contrib))
}
calc_savings(1000,1000,.05,.03,2)
runApp('Modalities')
library(dplyr)
# regular
n=15
simulation <- data.frame(year=integer(),savings_type=character(),modality=character(),balance=double())
for(k in 0:n) {
fv = future_value(10000, .001, k)
simulation <- add_row(simulation, year=k, savings_type="Regular Savings", "modality"="No Contrib", "balance"=fv)
simulation <- add_row(simulation, year=k, savings_type="Regular Savings", "modality"="Fixed Contrib", "balance"=fv + annuity(2000, .001, k))
simulation <- add_row(simulation, year=k, savings_type="Regular Savings", "modality"="Growing Contrib", "balance"=fv+ growing_annuity(2000, .001, .04, k))
}
# high yield
for(k in 0:n) {
fv = future_value(10000, .0225, k)
simulation <- add_row(simulation, year=k, savings_type="High Yield", "modality"="No Contrib", "balance"=fv)
simulation <- add_row(simulation, year=k, savings_type="High Yield", "modality"="Fixed Contrib", "balance"=fv + annuity(2000, .0225, k))
simulation <- add_row(simulation, year=k, savings_type="High Yield", "modality"="Growing Contrib", "balance"=fv+ growing_annuity(2000, .0225, .04, k))
}
# Index Fund
for(k in 0:n) {
fv = future_value(10000, .065, k)
simulation <- add_row(simulation, year=k, savings_type="Index Fund", "modality"="No Contrib", "balance"=fv)
simulation <- add_row(simulation, year=k, savings_type="Index Fund", "modality"="Fixed Contrib", "balance"=fv + annuity(2000, .065, k))
simulation <- add_row(simulation, year=k, savings_type="Index Fund", "modality"="Growing Contrib", "balance"=fv+ growing_annuity(2000, .065, .04, k))
}
simulation
library(dplyr)
# regular
n=15
simulation <- data.frame(year=integer(),savings_type=character(),modality=character(),balance=double())
for(k in 0:n) {
fv = future_value(10000, .001, k)
simulation <- add_row(simulation, year=k, savings_type="Regular Savings", "modality"="No Contrib", "balance"=fv)
simulation <- add_row(simulation, year=k, savings_type="Regular Savings", "modality"="Fixed Contrib", "balance"=fv + annuity(2000, .001, k))
simulation <- add_row(simulation, year=k, savings_type="Regular Savings", "modality"="Growing Contrib", "balance"=fv+ growing_annuity(2000, .001, .04, k))
}
# high yield
for(k in 0:n) {
fv = future_value(10000, .0225, k)
simulation <- add_row(simulation, year=k, savings_type="High Yield", "modality"="No Contrib", "balance"=fv)
simulation <- add_row(simulation, year=k, savings_type="High Yield", "modality"="Fixed Contrib", "balance"=fv + annuity(2000, .0225, k))
simulation <- add_row(simulation, year=k, savings_type="High Yield", "modality"="Growing Contrib", "balance"=fv+ growing_annuity(2000, .0225, .04, k))
}
# Index Fund
for(k in 0:n) {
fv = future_value(10000, .065, k)
simulation <- add_row(simulation, year=k, savings_type="Index Fund", "modality"="No Contrib", "balance"=fv)
simulation <- add_row(simulation, year=k, savings_type="Index Fund", "modality"="Fixed Contrib", "balance"=fv + annuity(2000, .065, k))
simulation <- add_row(simulation, year=k, savings_type="Index Fund", "modality"="Growing Contrib", "balance"=fv+ growing_annuity(2000, .065, .04, k))
}
simulation
shiny::runApp('Modalities')
shiny::runApp('Modalities')
install.packages('rsconnect')
getwd()
rsconnect::setAccountInfo(name='gavrilm',
token='699724B7345E4800861BD8D060AE44E1',
secret='AKFNP1HC40Qq18XoVZjhrc2ynSdFaimVFrif6mS8')
library(rsconnect)
rsconnect::deployApp('Modalities')
